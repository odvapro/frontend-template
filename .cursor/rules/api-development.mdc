---
globs: *.js,*.vue
description: API development guidelines using custom useRequest and useClientRequest
---

# API Development Guidelines

## Request Types

### Server-Side Requests
Use custom `useRequest` (based on `useFetch`) for server-side requests:
- Executed on server before page mounting
- Data available during hydration
- Prevents loading states for initial data

### Client-Side Requests  
Use custom `useClientRequest` (based on `$fetch`) for client-side requests:
- Standard requests executed on client
- Used for user interactions and dynamic content
- Can be triggered on component mount or user actions

## API Module Organization

### `/api` Directory Structure
Organize API functions by modules in `/api` directory:
```
/api
├── auth.js          # Authentication requests
├── user.js          # User-related requests  
├── news.js          # News/articles requests
└── products.js      # Product requests
```

### Module Example:
```javascript
// api/user.js
export const userApi = {
	/**
	 * Get user profile data
	 * @param {string} userId - User ID
	 * @returns {Promise<Object>} User profile data
	 */
	async getUserProfile(userId)
	{
		return await useRequest(`/api/users/${userId}`)
	},
	
	/**
	 * Update user profile
	 * @param {string} userId - User ID
	 * @param {Object} userData - Updated user data
	 * @returns {Promise<Object>} Updated user data
	 */
	async updateUserProfile(userId, userData)
	{
		return await useClientRequest(`/api/users/${userId}`, {
			method: 'PUT',
			body: userData
		})
	}
}
```

## Usage Examples

### Server-Side Request (useRequest):
```vue
<script>
	// This runs on server, data available immediately
	const { data: news } = await useRequest('/api/news/latest')
	
	export default {
		name: 'NewsPage',
		setup()
		{
			return {
				news
			}
		}
	}
</script>
```

### Client-Side Request (useClientRequest):
```vue
<script>
	export default {
		name: 'UserProfile',
		data()
		{
			return {
				user: null,
				loading: false
			}
		},
		methods:
		{
			async loadUserData()
			{
				this.loading = true
				try
				{
					this.user = await useClientRequest('/api/user/profile')
				}
				catch (error)
				{
					console.error('Failed to load user data:', error)
				}
				finally
				{
					this.loading = false
				}
			}
		},
		async mounted()
		{
			await this.loadUserData()
		}
	}
</script>
```

## Error Handling
Always implement proper error handling for API requests:

```javascript
async function fetchData()
{
	try
	{
		const data = await useClientRequest('/api/data')
		return data
	}
	catch (error)
	{
		console.error('API request failed:', error)
		// Handle error appropriately
		throw error
	}
}
```

## Request Configuration
Configure requests with appropriate options:

```javascript
// GET request with query parameters
const data = await useClientRequest('/api/search', {
	query: {
		q: searchTerm,
		page: currentPage,
		limit: 20
	}
})

// POST request with body
const result = await useClientRequest('/api/users', {
	method: 'POST',
	body: {
		name: 'John Doe',
		email: 'john@example.com'
	}
})

// Request with headers
const response = await useClientRequest('/api/protected', {
	headers: {
		'Authorization': `Bearer ${token}`
	}
})
```

## Exception Rules
- Don't create API modules for single-use requests on specific pages
- Group similar requests in appropriate modules
- Use descriptive function names that indicate the operation
- Document API functions with JSDoc comments